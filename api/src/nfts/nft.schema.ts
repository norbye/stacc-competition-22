import * as mongoose from 'mongoose';

export const NftSchema = new mongoose.Schema(
  {
    id: { type: Number, unique: true },
    token_id: String,
    num_sales: Number,
    background_color: String,
    image_url: String,
    image_preview_url: String,
    image_thumbnail_url: String,
    image_original_url: String,
    animation_url: String,
    animation_original_url: String,
    name: String,
    description: String,
    external_link: String,
    asset_contract: {
      address: String,
      asset_contract_type: String,
      created_date: String,
      name: String,
      nft_version: String,
      opensea_version: String,
      owner: Number,
      schema_name: String,
      symbol: String,
      total_supply: String,
      description: String,
      external_link: String,
      image_url: String,
      default_to_fiat: Boolean,
      dev_buyer_fee_basis_points: Number,
      dev_seller_fee_basis_points: Number,
      only_proxied_transfers: Boolean,
      opensea_buyer_fee_basis_points: Number,
      opensea_seller_fee_basis_points: Number,
      buyer_fee_basis_points: Number,
      seller_fee_basis_points: Number,
      payout_address: String,
    },
    permalink: String,
    nft_collection: { type: mongoose.Schema.Types.ObjectId, ref: 'Collection' },
    decimals: String,
    token_metadata: String,
    owner: { type: mongoose.Schema.Types.ObjectId, ref: 'Person' },
    sell_orders: String,
    creator: { type: mongoose.Schema.Types.ObjectId, ref: 'Person' },
    traits: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Trait' }],
    last_sale: {
      _id: mongoose.Schema.Types.ObjectId,
      asset: {
        token_id: String,
        decimals: String,
      },
      asset_bundle: String,
      event_type: String,
      event_timestamp: String,
      auction_type: String,
      total_price: String,
      payment_token: {
        id: Number,
        symbol: String,
        address: String,
        image_url: String,
        name: String,
        decimals: Number,
        eth_price: String,
        usd_price: String,
      },
      transaction: {
        block_hash: String,
        block_number: String,
        from_account: { type: mongoose.Schema.Types.ObjectId, ref: 'Person' },
        id: Number,
        timestamp: String,
        to_account: { type: mongoose.Schema.Types.ObjectId, ref: 'Person' },
        transaction_hash: String,
        transaction_index: String,
      },
      created_date: String,
      quantity: String,
    },
    top_bid: String,
    listing_date: String,
    is_presale: Boolean,
    transfer_fee_payment_token: String,
    transfer_fee: String,
  },
  {
    strict: false,
  },
);

export const CollectionSchema = new mongoose.Schema(
  {
    banner_image_url: String,
    chat_url: String,
    created_date: String,
    default_to_fiat: Boolean,
    description: String,
    dev_buyer_fee_basis_points: String,
    dev_seller_fee_basis_points: String,
    discord_url: String,
    display_data: {
      card_display_style: String,
    },
    external_url: String,
    featured: Boolean,
    featured_image_url: String,
    hidden: Boolean,
    safelist_request_status: String,
    image_url: String,
    is_subject_to_whitelist: Boolean,
    large_image_url: String,
    medium_username: String,
    name: String,
    only_proxied_transfers: Boolean,
    opensea_buyer_fee_basis_points: String,
    opensea_seller_fee_basis_points: String,
    payout_address: String,
    require_email: Boolean,
    short_description: String,
    slug: { type: String, unique: true },
    telegram_url: String,
    twitter_username: String,
    instagram_username: String,
    wiki_url: String,
  },
  {
    strict: false,
  },
);

export const PersonSchema = new mongoose.Schema({
  user: {
    username: String,
  },
  profile_img_url: String,
  address: { type: String, unique: true },
  config: String,
});

export const TraitSchema = new mongoose.Schema({
  trait_type: String,
  value: String,
  display_type: String,
  max_value: String,
  trait_count: Number,
  order: String,
});

export const BidSchema = new mongoose.Schema({
  personName: String,
  sum: Number,
  date: Date,
  nft: String,
});
